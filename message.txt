#!/usr/bin/env python3
"""
Module 1: Basic MCP Server - Starter Code
TODO: Implement tools for analyzing git changes and suggesting PR templates
"""

import json
import subprocess
from pathlib import Path

from mcp.server.fastmcp import FastMCP

# Initialize the FastMCP server
mcp = FastMCP("pr-agent")

# PR template directory (shared across all modules)
TEMPLATES_DIR = Path(__file__).parent.parent.parent / "templates"


# TODO: Implement tool functions here
# Example structure for a tool:
# @mcp.tool()
# async def analyze_file_changes(base_branch: str = "main", include_diff: bool = True) -> str:
#     """Get the full diff and list of changed files in the current git repository.
#     
#     Args:
#         base_branch: Base branch to compare against (default: main)
#         include_diff: Include the full diff content (default: true)
#     """
#     # Your implementation here
#     pass

# Minimal stub implementations so the server runs
# TODO: Replace these with your actual implementations

@mcp.tool()
async def analyze_file_changes(base_branch: str = "main", include_diff: bool = True, max_diff_lines: int = 500, working_dir: str = ".") -> str:
    """Get the full diff and list of changed files in the current git repository.
    
    Args:
        base_branch: Base branch to compare against (default: main)
        include_diff: Include the full diff content (default: true)
    """
    # TODO: Implement this tool
    # IMPORTANT: MCP tools have a 25,000 token response limit!
    # Large diffs can easily exceed this. Consider:
    # - Adding a max_diff_lines parameter (e.g., 500 lines)
    # - Truncating large outputs with a message
    # - Returning summary statistics alongside limited diffs
    context = mcp.get_context()
    roots_result = await context.session.list_roots()
    working_dir = roots_result.roots[0].uri.path
    if include_diff:
        # 1. Find the merge-base of HEAD and main
        merge_base = (
            subprocess
            .check_output(['git', 'merge-base', 'HEAD', base_branch], cwd=working_dir)
            .strip()
            .decode('ascii')
        )
        # 2. Diff against that base
        diff = (
            subprocess
            .check_output(['git', 'diff', merge_base], cwd=working_dir)
            .decode('utf-8')
        )
        changed_files = (
        subprocess
        .check_output(['git', 'diff', '--name-only', merge_base], cwd=working_dir)
        .decode('utf-8')
        .splitlines()
        )
        # Limit the diff to max_diff_lines
        diff_lines = diff.splitlines()
        if len(diff_lines) > max_diff_lines:
            diff = "\n".join(diff_lines[:max_diff_lines]) + "\n... (truncated to {} lines)".format(max_diff_lines)
    # NOTE: Git commands run in the server's directory by default!
    # To run in Claude's working directory, use MCP roots:

    
    return json.dumps({
        "changed_files": changed_files,
        "diff": diff if include_diff else None,
        "base_branch": base_branch,
        "working_dir": working_dir
    })


@mcp.tool()
async def get_pr_templates() -> str:
    """List available PR templates with their content."""
    # TODO: Implement this tool
    TEMPLATES_DIR = Path(__file__).parent.parent.parent / "templates"
    templates = {}
    for template_file in TEMPLATES_DIR.glob("*.md"):
        with open(template_file, 'r', encoding='utf-8') as f:
            templates[template_file.name] = f.read()
    return json.dumps(templates)


@mcp.tool()
async def suggest_template(changes_summary: str, change_type: str) -> str:
    """Let Claude analyze the changes and suggest the most appropriate PR template.
    
    Args:
        changes_summary: Your analysis of what the changes do
        change_type: The type of change you've identified (bug, feature, docs, refactor, test, etc.)
    """
    # TODO: Implement this tool
    # Get available templates
    templates_response = await get_pr_templates()
    templates = json.loads(templates_response)
    TYPE_MAPPING = {
    "bug": "bug.md",
    "fix": "bug.md",
    "feature": "feature.md",
    "enhancement": "feature.md",
    "docs": "docs.md",
    "documentation": "docs.md",
    "refactor": "refactor.md",
    "cleanup": "refactor.md",
    "test": "test.md",
    "testing": "test.md",
    "performance": "performance.md",
    "optimization": "performance.md",
    "security": "security.md"
    }
    # Find matching template
    template_file = TYPE_MAPPING.get(change_type.lower(), "feature.md")
    selected_template = next(
        (t for t in templates if t["filename"] == template_file),
        templates[0]  # Default to first template if no match
    )
    
    suggestion = {
        "recommended_template": selected_template,
        "reasoning": f"Based on your analysis: '{changes_summary}', this appears to be a {change_type} change.",
        "template_content": selected_template["content"],
        "usage_hint": "Claude can help you fill out this template based on the specific changes in your PR."
    }
    
    return json.dumps(suggestion, indent=2)

if __name__ == "__main__":
    mcp.run()